{"version":3,"sources":["components/Nav/Left/LeftNav.module.css","components/Profile/info/ProfileInfo.module.css","components/Profile/Wall/ProfileWall.module.css","App.module.css","components/Profile/Wall/OldPosts/OldPosts.module.css","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","components/Profile/Wall/NewPost/NewPost.module.css","components/Profile/Profile.module.css","components/Dialogs/DialogsItem/Dialog.module.css","components/Friends/Friends.module.css","Redux/postReducer.tsx","Redux/chatReducer.tsx","Redux/friendsReducer.tsx","Redux/redux-store.tsx","components/Header/Header.tsx","components/Nav/Left/LeftNav.tsx","components/Profile/info/ProfileInfo.tsx","components/Profile/Wall/OldPosts/OldPosts.tsx","components/Profile/Wall/NewPost/NewPostContainer.tsx","components/Profile/Wall/NewPost/NewPost.tsx","components/Profile/Wall/ProfileWallContainer.tsx","components/Profile/Wall/ProfileWall.tsx","components/Profile/Profile.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/DialogsItem/Dialog.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Friends/UsersApiComponent.tsx","components/Friends/FriendsContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","posts","id","v1","text","newPostText","ADD_POST","UPDATE_NEW_POST_TEXT","dialogs","name","messages","MessageText","newMessageText","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","users","pageSize","TotalUsersCount","currentPage","newFriendsText","FOLLOW","UNFOLLOW","SET_USERS","ADD_FRIEND","UPDATE_NEW_FRIEND_TEXT","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","reducers","combineReducers","postPage","state","action","type","stateCopy","newText","chatPage","friendsPage","followed","status","location","country","city","map","u","userId","pageNumber","totalCount","store","createStore","Header","className","s","header","photo","src","alt","LeftNav","nav","container","to","activeClassName","activeLink","ProfileInfo","BGPhotoContainer","BGPhoto","PhotoContainer","Photo","OldPosts","props","oldPost","circle","oldPostText","post","NewPostContainer","connect","dispatch","onPostChange","updateNewPostActionCreator","addPost","placeholder","value","onChange","e","currentTarget","button","onClick","ProfileWallContainer","oldPostsElement","p","key","hr","Profile","Message","message","DialogItem","dialog","DialogsContainer","addMessage","onMessageChange","updateNewMessageActionCreator","chatItem","d","messageItem","m","UsersApiComponent","onPageChanged","setCurrentPage","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","pagesCount","Math","ceil","pages","i","push","number","userContainer","followlogo","logo","follow","unFollow","about","nameStatus","React","Component","FriendsContainer","addFriend","updateNewFriendText","updateNewFriendTextAC","FollowAC","UnFollowAC","SetUsersAC","SetCurrentPageAC","SetTotalUsersCountAC","App","generalContainer","centerContainer","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c64fe649.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"LeftNav_nav__3ZFLW\",\"container\":\"LeftNav_container__2zAU9\",\"activeLink\":\"LeftNav_activeLink__20zNy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__2IVfd\",\"BGPhotoContainer\":\"ProfileInfo_BGPhotoContainer__3soGX\",\"BGPhoto\":\"ProfileInfo_BGPhoto__1Thwn\",\"PhotoContainer\":\"ProfileInfo_PhotoContainer__3e4ze\",\"Photo\":\"ProfileInfo_Photo__30T8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"ProfileWall_post__21pn3\",\"hr\":\"ProfileWall_hr__1MsC0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"generalContainer\":\"App_generalContainer__13mNs\",\"container\":\"App_container__Ga5jW\",\"centerContainer\":\"App_centerContainer__189BH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"OldPosts_circle__3XNM2\",\"oldPost\":\"OldPosts_oldPost__HiVzV\",\"oldPostText\":\"OldPosts_oldPostText__2U_Jk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2C737\",\"dialogs\":\"Dialogs_dialogs__28Du8\",\"message\":\"Dialogs_message__1bxbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__4hzlk\",\"photo\":\"Header_photo__1lucW\",\"search\":\"Header_search__15HVd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"placeholder\":\"NewPost_placeholder__2LHRY\",\"button\":\"NewPost_button__2WLNW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__3n2pj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"Dialog_activeLink__1x_EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"Friends_userContainer__1JFOT\",\"followlogo\":\"Friends_followlogo__ByiQq\",\"logo\":\"Friends_logo__3exBk\",\"photo\":\"Friends_photo__3zo4J\",\"follow\":\"Friends_follow__YOFLA\",\"btn\":\"Friends_btn__1bFcG\",\"about\":\"Friends_about__3I3nC\",\"nameStatus\":\"Friends_nameStatus__18QCI\",\"name\":\"Friends_name__10c2F\",\"status\":\"Friends_status__2iaDT\",\"location\":\"Friends_location__3WZmN\",\"country\":\"Friends_country__17TbI\",\"city\":\"Friends_city__11Oaa\",\"number\":\"Friends_number__15kbf\"};","import {v1} from \"uuid\";\r\n\r\nexport type PostType = {\r\n    id: string\r\n    text: string\r\n}\r\nexport  type PostPageType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type PostReducerAT =\r\n    AddPostAT | UpdateNewPostTextAT\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), text: \"Hello, everyone!!!!!!!!!\"},\r\n        {id: v1(), text: \"It's my first site!\"},\r\n        {id: v1(), text: \"Yoo!\"},\r\n        {id: v1(), text: \"Yoo!\"},\r\n        {id: v1(), text: \"Yoo!\"},\r\n        {id: v1(), text: \"Yoo!\"},\r\n        {id: v1(), text: \"Yoooo!\"},\r\n    ],\r\n    newPostText: \"\"\r\n}\r\n\r\nexport const postReducer = (state: PostPageType = initialState, action: PostReducerAT) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let stateCopy = {...state}\r\n            stateCopy.posts = [{id: v1(), text: state.newPostText}, ...state.posts]\r\n            stateCopy.newPostText = \"\"\r\n            return stateCopy\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            let stateCopy = {...state}\r\n            stateCopy.newPostText = action.newText\r\n            return stateCopy\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//--------------------------------------ADD-POST----------------------------------\r\nconst ADD_POST = \"ADD-POST\"\r\nexport type AddPostAT = {\r\n    type: \"ADD-POST\"\r\n//    newText: string\r\n}\r\nexport const addPostActionCreator = (): AddPostAT =>\r\n    ({type: ADD_POST})\r\n\r\n//-----------------------------------UPDATE-NEW-POST-TEXT--------------------------------\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nexport type UpdateNewPostTextAT = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    newText: string\r\n}\r\nexport const updateNewPostActionCreator = (text: string): UpdateNewPostTextAT =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text})\r\n","import {v1} from \"uuid\";\r\n\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    MessageText: string\r\n}\r\nexport type ChatPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nexport type ChatReducerAT =\r\n    AddMessageAT | UpdateNewMessageTextAT\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {name: \"Valera\", id: v1()},\r\n        {name: \"Gosha\", id: v1()},\r\n        {name: \"Ilya\", id: v1()},\r\n        {name: \"Yura\", id: v1()}\r\n    ],\r\n    messages: [\r\n        {id: v1(), MessageText: \"Hello\"},\r\n        {id: v1(), MessageText: \"Where are you?\"},\r\n        {id: v1(), MessageText: \"Brooo\"},\r\n        {id: v1(), MessageText: \"Fine\"},\r\n    ],\r\n    newMessageText: \"\"\r\n}\r\n\r\nexport const chatReducer = (state: ChatPageType = initialState, action: ChatReducerAT) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let stateCopy = {...state}\r\n            stateCopy.messages = [...state.messages, {id: v1(), MessageText: state.newMessageText}]\r\n            stateCopy.newMessageText = \"\"\r\n            return stateCopy\r\n        }\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            let stateCopy = {...state}\r\n            stateCopy.newMessageText = action.MessageText\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//---------------------------------------ADD-MESSAGE-----------------------------------\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nexport type AddMessageAT = {\r\n    type: \"ADD-MESSAGE\"\r\n    //  MessageText: string\r\n}\r\nexport const addMessageActionCreator = (): AddMessageAT =>\r\n    ({type: ADD_MESSAGE})\r\n//------------------------------------UPDATE-NEW-MESSAGE-TEXT----------------------\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\nexport type UpdateNewMessageTextAT = {\r\n    type: \"UPDATE-NEW-MESSAGE-TEXT\"\r\n    MessageText: string\r\n}\r\nexport const updateNewMessageActionCreator = (text: string): UpdateNewMessageTextAT =>\r\n    ({type: UPDATE_NEW_MESSAGE_TEXT, MessageText: text})","import {v1} from \"uuid\";\r\n\r\nexport type FriendsReducerAT =\r\n    FollowAT\r\n    | UnFollowAT\r\n    | SetUsersAT\r\n    | AddFriendAT\r\n    | UpdateNewFriendTextAT\r\n    | SetCurrentPageAT\r\n    | SetTotalUsersCountAT\r\n\r\nexport type LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n    followed: boolean\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type FriendsPageType = {\r\n    users: FriendType[]\r\n    pageSize: number\r\n    TotalUsersCount: number\r\n    currentPage: number\r\n    newFriendsText: string\r\n}\r\n\r\nlet initialState: FriendsPageType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    TotalUsersCount: 0,\r\n    currentPage: 1,\r\n    newFriendsText: \"\"\r\n}\r\n\r\nexport const friendsReducer = (state: FriendsPageType = initialState, action: FriendsReducerAT) => {\r\n    switch (action.type) {\r\n        case ADD_FRIEND: {\r\n            return {\r\n                ...state, users: state.users = [{\r\n                    id: v1(),\r\n                    name: state.newFriendsText,\r\n                    followed: true,\r\n                    status: \"Hello, there!\",\r\n                    location:\r\n                        {\r\n                            country: \"Russia\",\r\n                            city: \"Moscow\"\r\n                        }\r\n                },\r\n                    ...state.users],\r\n                newFriendsText: state.newFriendsText = \"\"\r\n            }\r\n        }\r\n        case UPDATE_NEW_FRIEND_TEXT: {\r\n            return {...state, newFriendsText: state.newFriendsText = action.newText}\r\n        }\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.pageNumber}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT:{\r\n            return {...state, TotalUsersCount:action.totalCount}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------FOLLOW----------------------------------\r\nconst FOLLOW = \"FOLLOW\"\r\nexport type FollowAT = {\r\n    type: typeof FOLLOW\r\n    userId: string\r\n}\r\nexport const FollowAC = (userId: string): FollowAT => ({\r\n    type: FOLLOW,\r\n    userId: userId\r\n})\r\n//--------------------------------------UNFOLLOW----------------------------------\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nexport type UnFollowAT = {\r\n    type: typeof UNFOLLOW\r\n    userId: string\r\n}\r\nexport const UnFollowAC = (userId: string): UnFollowAT => ({\r\n    type: UNFOLLOW,\r\n    userId: userId\r\n})\r\n//--------------------------------------SET_USERS----------------------------------\r\nconst SET_USERS = \"SET_USERS\"\r\nexport type SetUsersAT = {\r\n    type: typeof SET_USERS\r\n    users: FriendType[]\r\n}\r\nexport const SetUsersAC = (users: FriendType[]): SetUsersAT => ({\r\n    type: SET_USERS,\r\n    users: users\r\n})\r\n//--------------------------------------ADD-FRIEND----------------------------------\r\nconst ADD_FRIEND = \"ADD-FRIEND\"\r\nexport type AddFriendAT = {\r\n    type: typeof ADD_FRIEND\r\n}\r\nexport const addFriendAC = (): AddFriendAT =>\r\n    ({type: ADD_FRIEND})\r\n//------------------------------------UPDATE-NEW-FRIEND-TEXT----------------------\r\nconst UPDATE_NEW_FRIEND_TEXT = \"UPDATE-NEW-FRIEND-TEXT\"\r\nexport type UpdateNewFriendTextAT = {\r\n    type: typeof UPDATE_NEW_FRIEND_TEXT\r\n    newText: string\r\n}\r\nexport const updateNewFriendTextAC = (text: string): UpdateNewFriendTextAT => ({\r\n    type: UPDATE_NEW_FRIEND_TEXT,\r\n    newText: text\r\n})\r\n//------------------------------------SET-CURRENT-PAGE----------------------\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nexport type SetCurrentPageAT = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    pageNumber: number\r\n}\r\nexport const SetCurrentPageAC = (pageNumber: number): SetCurrentPageAT => ({\r\n    type: SET_CURRENT_PAGE,\r\n    pageNumber: pageNumber\r\n})\r\n//------------------------------------SET-TOTAL-USERS-COUNT----------------------\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nexport type SetTotalUsersCountAT = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalCount:number\r\n}\r\nexport const SetTotalUsersCountAC=(totalCount:number):SetTotalUsersCountAT=>({\r\n    type:SET_TOTAL_USERS_COUNT,\r\n    totalCount:totalCount\r\n})","import {combineReducers, createStore} from \"redux\";\r\nimport {AddPostAT, PostPageType, postReducer, UpdateNewPostTextAT} from \"./postReducer\";\r\nimport {AddMessageAT, ChatPageType, chatReducer, UpdateNewMessageTextAT} from \"./chatReducer\"\r\nimport {FriendsPageType, friendsReducer} from \"./friendsReducer\";\r\nimport React from \"react\";\r\n\r\nexport type StateType = {\r\n    chatPage: ChatPageType\r\n    postPage: PostPageType\r\n    friendsPage: FriendsPageType\r\n}\r\n\r\nexport type ActionType =\r\n    AddMessageAT\r\n    | UpdateNewPostTextAT\r\n    | AddPostAT\r\n    | UpdateNewMessageTextAT\r\n\r\nlet reducers = combineReducers({\r\n    postPage: postReducer,\r\n    chatPage: chatReducer,\r\n    friendsPage: friendsReducer,\r\n})\r\n\r\nexport let store = createStore(reducers)\r\n\r\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\n\r\nexport function Header() {\r\n    return (\r\n            <header className={s.header}>\r\n                <img className={s.photo} src=\"https://cdn.pixabay.com/photo/2014/04/02/17/01/logo-307673_1280.png\" alt=\"\"/>\r\n            </header>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./LeftNav.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport function LeftNav() {\r\n    return (\r\n            <nav className={s.nav}>\r\n                <ul className={s.container}>\r\n                    <li><NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink></li>\r\n                    <li><NavLink to=\"/newsfeed\" activeClassName={s.activeLink}>NewsFeed</NavLink></li>\r\n                    <li><NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink></li>\r\n                    <li><NavLink to=\"/friends\" activeClassName={s.activeLink}>Friends</NavLink></li>\r\n                    <li><NavLink to=\"/community\" activeClassName={s.activeLink}>Community</NavLink></li>\r\n                    <li><NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink></li>\r\n                    <li><NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\nexport function ProfileInfo() {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.BGPhotoContainer}>\r\n                <img className={s.BGPhoto}\r\n                     src=\"https://iqonic.design/themes/socialv/html/images/page-img/profile-bg1.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={s.PhotoContainer}>\r\n                <img className={s.Photo}\r\n                     src=\"https://avatars.mds.yandex.net/get-pdb/1552679/d24a4f83-bab4-44f3-b759-67f08a41fe6e/s1200?webp=false\"\r\n                     alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./OldPosts.module.css\"\r\nimport {PostType} from \"../../../../Redux/postReducer\";\r\n\r\ntype PropsType={\r\n    post:PostType\r\n}\r\n\r\nexport function OldPosts(props:PropsType) {\r\n    return (\r\n        <section className={s.oldPost}>\r\n            <div className={s.circle}></div>\r\n            <div className={s.oldPostText}>{props.post.text}</div>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport {NewPost} from \"./NewPost\";\r\nimport {addPostActionCreator, updateNewPostActionCreator} from \"../../../../Redux/postReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../Redux/redux-store\";\r\n\r\nlet mapStateToProps=(state:StateType)=>{\r\n    return {\r\n        postPage:state.postPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return{\r\n        onPostChange:(text:string)=>{\r\n            dispatch(updateNewPostActionCreator(text))\r\n        },\r\n        addPost:()=>{\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nexport const NewPostContainer=connect(mapStateToProps,mapDispatchToProps)(NewPost)\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./NewPost.module.css\"\r\nimport {PostPageType} from \"../../../../Redux/postReducer\";\r\n\r\ntype PropsType = {\r\n    onPostChange: (text: string) => void\r\n    addPost: () => void\r\n    postPage: PostPageType\r\n}\r\n\r\nexport function NewPost(props: PropsType) {\r\n\r\n    let addPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let text = e.currentTarget.value\r\n        props.onPostChange(text)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={s.placeholder}\r\n                type=\"text\"\r\n                placeholder='your news...'\r\n                value={props.postPage.newPostText}\r\n                onChange={onPostChange}\r\n            />\r\n            <input className={s.button} type=\"submit\" onClick={addPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport './ProfileWall.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileWall} from \"./ProfileWall\";\r\nimport {StateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        posts: state.postPage.posts\r\n    }\r\n}\r\n\r\nexport const ProfileWallContainer = connect(mapStateToProps)(ProfileWall)\r\n\r\n","import React from \"react\";\r\nimport './ProfileWall.module.css'\r\nimport {OldPosts} from \"./OldPosts/OldPosts\";\r\nimport s from \"./ProfileWall.module.css\"\r\nimport {NewPostContainer} from \"./NewPost/NewPostContainer\";\r\nimport {PostType} from \"../../../Redux/postReducer\";\r\n\r\ntype PropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\nexport function ProfileWall(props: PropsType) {\r\n\r\n    let oldPostsElement = props.posts.map((p) => <OldPosts key={p.id} post={p}/>)\r\n\r\n    return <div className={s.post}>\r\n        <h1>My posts</h1>\r\n        <NewPostContainer/>\r\n        <hr className={s.hr}/>\r\n        {oldPostsElement}\r\n    </div>\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./info/ProfileInfo\";\r\nimport s from './Profile.module.css'\r\nimport {ProfileWallContainer} from \"./Wall/ProfileWallContainer\";\r\n\r\nexport function Profile() {\r\n    return (\r\n        <div className={s.container}>\r\n            <ProfileInfo />\r\n            <ProfileWallContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {MessageType} from \"../../../Redux/chatReducer\";\r\n\r\ntype PropsType = {\r\n    message: MessageType\r\n}\r\n\r\nexport function Message(props: PropsType) {\r\n    return (\r\n        <div>\r\n        <p>{props.message.MessageText}</p>\r\n        </div>\r\n    )\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport {DialogsType} from \"../../../Redux/chatReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    dialog:DialogsType\r\n}\r\n\r\nexport function DialogItem(props: PropsType) {\r\n    return (\r\n        <ul>\r\n            <li><NavLink to={\"/dialogs/\" + props.dialog.id} activeClassName={s.activeLink}>{props.dialog.name}</NavLink></li>\r\n        </ul>\r\n    )\r\n}","import React from \"react\";\r\nimport {addMessageActionCreator, updateNewMessageActionCreator,} from \"../../Redux/chatReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {StateType} from \"../../Redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        chatPage: state.chatPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: () => {\r\n            dispatch(addMessageActionCreator())\r\n        },\r\n        onMessageChange: (text: string) => {\r\n            dispatch(updateNewMessageActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Messages/Message\";\r\nimport {DialogItem} from \"./DialogsItem/Dialog\";\r\nimport {ChatPageType} from \"../../Redux/chatReducer\";\r\n\r\ntype PropsType = {\r\n    chatPage: ChatPageType\r\n    addMessage: () => void\r\n    onMessageChange: (text: string) => void\r\n}\r\n\r\nexport function Dialogs(props: PropsType) {\r\n\r\n    let chatItem = props.chatPage.dialogs.map((d) => <DialogItem key={d.id} dialog={d}/>)\r\n    let messageItem = props.chatPage.messages.map((m) => <Message key={m.id} message={m}/>)\r\n\r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    let onMessageChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let text = e.currentTarget.value\r\n        props.onMessageChange(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.dialogs}>\r\n                {chatItem}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messageItem}\r\n                <input\r\n                    type=\"text\"\r\n                    value={props.chatPage.newMessageText}\r\n                    onChange={onMessageChange}\r\n                />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"sent\"\r\n                    onClick={addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {FriendsPageType, FriendType, SetCurrentPageAT} from \"../../Redux/friendsReducer\";\r\nimport s from \"./Friends.module.css\";\r\nimport axios from \"axios\"\r\n\r\ntype PropsType = {\r\n    addFriend: () => void\r\n    updateNewFriendText: (text: string) => void\r\n    follow: (userId: string) => void\r\n    unFollow: (userId: string) => void\r\n    setUsers: (users: FriendType[]) => void\r\n    setCurrentPage:(pageNumber:number)=>void\r\n    setTotalUsersCount:(totalCount:number)=>void\r\n    friendsPage: FriendsPageType\r\n    pageSize: number\r\n    TotalUsersCount: number\r\n    currentPage:number\r\n}\r\n\r\nclass UsersApiComponent extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n            this.props.setUsers(response.data.items)\r\n            this.props.setTotalUsersCount(response.data.totalCount)\r\n        })\r\n    }\r\n\r\n    /*    getFriends = () => {\r\n            axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n        }*/\r\n\r\n    /*    onTextChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let text = e.currentTarget.value\r\n            this.props.updateNewFriendText(text)\r\n        }\r\n        addFriend = () => {\r\n            this.props.addFriend()\r\n        }*/\r\n\r\n    onPageChanged=(pageNumber:number)=>{\r\n        debugger\r\n        this.props.setCurrentPage(pageNumber)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                debugger\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        let pagesCount = Math.ceil(this.props.TotalUsersCount / this.props.pageSize)\r\n\r\n        let pages = []\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        return <div>\r\n\r\n            {pages.map((p) => {return <span onClick={()=>{this.onPageChanged(p)}} className={this.props.currentPage===p ? s.number : \"\"}> {p} </span>})}\r\n\r\n            {this.props.friendsPage.users.map((u) =>\r\n                <div key={u.id} className={s.userContainer}>\r\n                    <div className={s.followlogo}>\r\n                        <div className={s.logo}>\r\n                            <img className={s.photo}\r\n                                 src=\"https://avatars.mds.yandex.net/get-pdb/1605413/6f40644e-8150-4bd6-a28c-9a6ce0f22fd7/s1200?webp=false\"\r\n                                 alt=\"\"/>\r\n                        </div>\r\n                        <div className={s.follow}>\r\n                            {u.followed\r\n                                ? <button onClick={() => {\r\n                                    this.props.unFollow(u.id)\r\n                                }}>Unfollow</button>\r\n                                : <button onClick={() => {\r\n                                    this.props.follow(u.id)\r\n                                }}>Follow</button>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.about}>\r\n                        <div className={s.nameStatus}>\r\n                            <div className={s.name}>{u.name}</div>\r\n                            <div className={s.status}>{u.status}</div>\r\n                        </div>\r\n                        <div className={s.location}>\r\n                            <div className={s.country}>{\"u.location.country\"}</div>\r\n                            <div className={s.city}>{\"u.location.city\"}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>)}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default UsersApiComponent","import React from \"react\";\r\nimport {\r\n    addFriendAC,\r\n    FollowAC,\r\n    FriendType, SetCurrentPageAC, SetCurrentPageAT, SetTotalUsersCountAC,\r\n    SetUsersAC,\r\n    UnFollowAC,\r\n    updateNewFriendTextAC\r\n} from \"../../Redux/friendsReducer\";\r\nimport FriendsClass from \"./UsersApiComponent\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../Redux/redux-store\";\r\nimport UsersApiComponent from \"./UsersApiComponent\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        friendsPage: state.friendsPage,\r\n        pageSize: state.friendsPage.pageSize,\r\n        TotalUsersCount: state.friendsPage.TotalUsersCount,\r\n        currentPage: state.friendsPage.currentPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addFriend: () => {\r\n            dispatch(addFriendAC())\r\n        },\r\n        updateNewFriendText: (text: string) => {\r\n            dispatch(updateNewFriendTextAC(text))\r\n        },\r\n        follow: (userId: string) => {\r\n            dispatch(FollowAC(userId))\r\n        },\r\n        unFollow: (userId: string) => {\r\n            dispatch(UnFollowAC(userId))\r\n        },\r\n        setUsers: (users: FriendType[]) => {\r\n            dispatch(SetUsersAC(users))\r\n        },\r\n        setCurrentPage:(pageNumber:number)=>{\r\n            dispatch(SetCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount:(totalCount:number)=>{\r\n            dispatch(SetTotalUsersCountAC(totalCount))\r\n        }\r\n    }\r\n}\r\n\r\nexport const FriendsContainer = connect(mapStateToProps, mapDispatchToProps)(UsersApiComponent)","import React from 'react';\r\nimport s from './App.module.css'\r\nimport {Route} from \"react-router-dom\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {LeftNav} from \"./components/Nav/Left/LeftNav\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\nimport {FriendsContainer} from \"./components/Friends/FriendsContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.generalContainer}>\r\n            <Header/>\r\n            <div className={s.container}>\r\n                <div>\r\n                    <LeftNav/>\r\n                </div>\r\n                <div className={s.centerContainer}>\r\n                    <Route path='/profile' render={() => <Profile />}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer />} />\r\n                    <Route path='/friends' render={() => <FriendsContainer />}/>\r\n                </div>\r\n                <div>\r\n                    {/* <RightNav/>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import {store} from \"./Redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter>\r\n                <Provider store={store}>\r\n                    <App/>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n\r\n"],"sourceRoot":""}